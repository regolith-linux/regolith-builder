# This is a basic workflow to help you get started with Actions

name: Generate ISO

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: v1.5.0      
      - name: Apply a tag to the new commit
        id: create_tag
        uses: mcpierce/github-commit-timestamp-tagger@master
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          base_version: ${{ github.ref }}
      - name: Build ISO
        run: $GITHUB_WORKSPACE/iso-generator.sh /tmp/iso ${{ github.ref }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          release_name: Release ${{ steps.create_tag.outputs.tag_name }}
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /tmp/iso/regolith-${{ steps.create_tag.outputs.tag_name }}.iso
          asset_name: regolith-${{ steps.create_tag.outputs.tag_name }}.iso
          asset_content_type: application/zip
